from models.dnn_model.dnn import DNN
from codegen.codegen_visitor import CodegenVisitor


def visit_dnn(dnn: DNN, directory, gpu_profile):
    """Call. header (.h) visitor"""
    filepath = directory + "/" + dnn.name + ".h"
    with open(filepath, "w") as print_file:
        visitor = DNNHVisitor(dnn, print_file, gpu_profile)
        visitor.visit()


class DNNHVisitor(CodegenVisitor):
    def __init__(self, dnn: DNN, print_file, gpu_profile: bool):
        """
        Create new CPP-code visitor of a DNN/DNN partition
        :param dnn: DNN to visit
        :param print_file: open file to print CPP code of the DNN
        :param gpu_profile: include profiling code
        """
        super().__init__(print_file, prefix="")
        self.dnn = dnn
        self.gpu_profile = gpu_profile
        self.input_layer = self.dnn.get_input_layer()
        self.output_layer = self.dnn.get_output_layer()
        self.class_name = dnn.name
        self.base_class_name = "gpu_partition"

    def visit(self):
        self._write_common_beginning()
        self._write_common_end()

    def _write_common_beginning(self):
        """
        Begin a header file with common beginning
        """
        name = self.class_name
        self.write_line("// File automatically generated by ESPAM")
        self.write_line("")
        self.write_line("#ifndef " + name + "_H")
        self.write_line("#define " + name + "_H")
        self.write_line("")
        # tensorrt classes
        self.write_line("#include \"NvInfer.h\"")
        self.write_line("#include \"common.h\"")
        self.write_line("#include \"cuda_runtime_api.h\"")

        self.write_line("#include <map>")
        self.write_line("#include <vector>")
        self.write_line("#include <thread>")

        self.write_line("#include \"" + self.base_class_name + ".h\"")
        self.write_line("")
        self.write_line("using namespace std;")
        self.write_line("using namespace nvinfer1;")
        self.write_line("")
        self.write_line("class " + name + " : public " + self.base_class_name + " {")
        self.write_line("public:")
        self.prefix_inc()
        self.write_line(name + "();")
        self.write_line("virtual ~" + name + "();")
        self.write_line("")

        self.write_line("//DNN-dependent functions")
        self.write_line("ICudaEngine* createEngine(std::map<std::string, Weights>& weightMap,"
                        " unsigned int maxBatchSize, IBuilder* builder, nvinfer1::DataType dt) override;// DNN")
        self.write_line("void generate_dummy_weights() override; //generate dummy weights")
        self.write_line("void init_params() override; //initializer of DNN-specific parameters")

        self.prefix_dec()

    def _write_common_end(self):
        """
        Finish a header file with common ending
        """
        self.write_line("};")
        self.write_line("#endif // " + self.base_class_name + "_H")
