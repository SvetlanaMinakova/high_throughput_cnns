// File automatically generated by ESPAM

#include "NvInfer.h"
#include "common.h"
#include "cuda_runtime_api.h"
#include <map>
#include <vector>
#include <thread>
#include "Subnet2.h"
#include "gpu_partition.h"

using namespace std;
using namespace nvinfer1;

//NETWORK ENGINE WITH API
ICudaEngine* Subnet2::createEngine(std::map<std::string, Weights>& weightMap, unsigned int maxBatchSize, IBuilder* builder, nvinfer1::DataType dt) {
  INetworkDefinition* network = builder->createNetwork();
  
  // moc input_examples data Convolution28_input
  ITensor* Convolution28_input = network->addInput(this->INPUT_BLOB_NAME, dt, Dims4{1, this->INPUT_C, this->INPUT_H, this->INPUT_W});
  //Convolution28
  IConvolutionLayer* Convolution28 = network->addConvolution(*Convolution28_input, 8, DimsHW{5, 5}, weightMap["Convolution28_weights"], weightMap["Convolution28_bias"]);
  assert(Convolution28);
  Convolution28->setName("Convolution28");
  Convolution28->setStride(DimsHW{1, 1});
  Convolution28->setPadding(DimsHW{2, 2});
  
  //Pooling66
  IPoolingLayer* Pooling66 = network->addPooling(*Convolution28->getOutput(0), PoolingType::kMAX, DimsHW{2, 2});
  assert(Pooling66);
  Pooling66->setName("Pooling66");
  Pooling66->setStride(DimsHW{2, 2});
  
  
  // process layer Pooling66 as output 
  Pooling66->getOutput(0)->setName(this->OUTPUT_BLOB_NAME);
  network->markOutput(*Pooling66->getOutput(0));
  // Build engine
  builder->setMaxBatchSize(maxBatchSize);
  builder->setMaxWorkspaceSize(this->WORKSPACE_SIZE << 20);
  ICudaEngine* engine = builder->buildCudaEngine(*network);
  // Don't need the network any more
  network->destroy();
  return engine;
  
 }
 
 //init params function
 void Subnet2::init_params(){ 
   this->batchSize = 1;
   this->WORKSPACE_SIZE = 4;
   this->detailed_profile = true;
   this->IObindings = 2;
   this->INPUT_BLOB_NAME = "Convolution28_input";
   this->INPUT_C = 1;
   this->INPUT_H = 28;
   this->INPUT_W = 28;
   this->OUTPUT_BLOB_NAME = "external_Pooling66_Convolution110";
   this->OUTPUT_C = 8;
   this->OUTPUT_H = 14;
   this->OUTPUT_W = 14;
   this->OUTPUT_SIZE = OUTPUT_C * OUTPUT_H * OUTPUT_W;
   
 }
 
 //generate dummy weights
 void Subnet2::generate_dummy_weights() {
   //Weight blob names 
   std::vector<std::string> names;
   //Weight blob sizes 
   std::vector<uint32_t> sizes;
   names.push_back("Convolution28_weights");
   sizes.push_back(200);
   names.push_back("Convolution28_bias");
   sizes.push_back(8);
   
   generate_dummy(names, sizes);
 }
 
 //constructor
 Subnet2::Subnet2(){
   init_params();
   generate_dummy_weights();
   init_partition();
 }
 
 //destructor
 Subnet2::~Subnet2() {}
 
