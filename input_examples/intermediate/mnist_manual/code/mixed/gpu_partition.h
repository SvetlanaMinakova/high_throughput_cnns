
// File automatically generated by ESPAM

#ifndef gpu_partition_H
#define gpu_partition_H

#include "NvInfer.h"
#include "common.h"
#include "cuda_runtime_api.h"
#include <vector>
#include <thread>

using namespace nvinfer1;

class gpu_partition{
public:
  virtual ~gpu_partition();

  void init_partition();
  void destroy_partition();

  //void main(int argc, char** argv); //void main();//void main(void *threadarg);

  //DNN-independent functions
  void doRead(float* input, cudaStream_t* stream_ptr);
  void doWrite(float* output, cudaStream_t* stream_ptr);
  void doSync(cudaStream_t* stream_ptr);
  void doInference(cudaStream_t* stream_ptr);
  void APIToModel(std::map<std::string, nvinfer1::Weights>& weightMap, unsigned int maxBatchSize, IHostMemory** modelStream);
  void generate_dummy(std::vector<std::string> names, std::vector<uint32_t> sizes);

  //DNN-dependent functions
  virtual ICudaEngine* createEngine(std::map<std::string, nvinfer1::Weights>& weightMap, unsigned int maxBatchSize, IBuilder* builder, nvinfer1::DataType dt) = 0;// DNN
  virtual void init_params() = 0; //initializer of parameters, defined below
  virtual void generate_dummy_weights() = 0; //generate dummynvinfer1::Weights

  //DNN-independent parameters
  IRuntime* runtime;
  ICudaEngine* engine;
  IExecutionContext* context;
  void* buffers[10]; //GPU I/O buffers
  int inputIndex = 0;
  int outputIndex = 1;

  std::map<std::string, nvinfer1::Weights> weightMap;

  // DNN-dependent parameters
  int weights_num = 1;
  int batchSize = 1;

  int WORKSPACE_SIZE = 1;//GPU workspace size (MB)

  //DNN topology
  char* INPUT_BLOB_NAME = "data";
  //additional input blob names for multi-input processors
  std::vector<char*> ADDITIONAL_INPUT_BLOB_NAMES;
  std::vector<int> ADDITIONAL_INPUT_C;
  std::vector<int> ADDITIONAL_INPUT_H;
  std::vector<int> ADDITIONAL_INPUT_W;

  char* OUTPUT_BLOB_NAME = "output";
  //additional output blob names for multi-output partitions
  std::vector<char*> ADDITIONAL_OUPUT_BLOB_NAMES;

  //input/output bindings number (one input and one output by default)
  int IObindings = 2;

  int INPUT_C = 1;
  int INPUT_H = 1; 
  int INPUT_W = 1; 

  int OUTPUT_C = 1;
  int OUTPUT_H = 1; 
  int OUTPUT_W = 1; 

  int OUTPUT_SIZE = OUTPUT_C * OUTPUT_H * OUTPUT_W;

  //FIFO sizes
  int IP0_fifo_size = 1;
  int OP0_fifo_size = 1;

  //GPU detailed profiling
  bool detailed_profile = false;

//specific node parameters and functions
};
#endif // gpu_partition_H
